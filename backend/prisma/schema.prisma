// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // Assuming you're using PostgreSQL. Modify this based on your DB.
  url      = env("DATABASE_URL")
}

model User {
  id          Int       @id @default(autoincrement()) // id auto-increment
  name        String
  email       String    @unique
  password    String
  profilePic  String?   // optional profile picture
  messages    Message[] // One user can send multiple messages
  participants Participant[] // User can participate in multiple conversations
  notifications Notification[]
  online_status OnlineStatus[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("users") // Optional: To specify table name in the DB
}

model Conversation {
  id            Int          @id @default(autoincrement()) // id auto-increment
  participants  Participant[] // Many users in one conversation
  messages      Message[]     // A conversation can have many messages
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@map("conversations")
}

model Participant {
  id            Int          @id @default(autoincrement()) // id auto-increment
  userId        Int
  conversationId Int
  user          User         @relation(fields: [userId], references: [id])
  conversation  Conversation  @relation(fields: [conversationId], references: [id])
  joinedAt      DateTime      @default(now())
  lastReadAt    DateTime?     // Time when user last read messages in conversation
  @@unique([userId, conversationId]) // Each user can join one conversation only once

  @@map("participants")
}

model Message {
  id             Int         @id @default(autoincrement()) // id auto-increment
  content        String      // Message content
  senderId       Int
  conversationId Int
  sender         User        @relation(fields: [senderId], references: [id])
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  createdAt      DateTime    @default(now())

  @@map("messages")
}

model Notification {
  id             Int         @id @default(autoincrement()) // id auto-increment
  recipientId    Int         // ID of the recipient user
  messageId      Int         // ID of the message triggering the notification
  isRead         Boolean     @default(false) // Whether the notification has been read
  recipient      User        @relation(fields: [recipientId], references: [id])
  createdAt      DateTime    @default(now())

  @@map("notifications")
}

model OnlineStatus {
  id        Int       @id @default(autoincrement()) // id auto-increment
  userId    Int       @unique // ID of the user
  isOnline  Boolean   @default(false) // Whether the user is online
  lastActiveAt DateTime? // The last time the user was active
  user      User      @relation(fields: [userId], references: [id])

  @@map("online_status")
}
