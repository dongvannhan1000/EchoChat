// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // Assuming you're using PostgreSQL. Modify this based on your DB.
  url      = env("DATABASE_URL")
}

model User {
  id            Int        @id @default(autoincrement())
  name          String
  email         String     @unique
  password      String
  avatar        String?
  block         Int[]      @default([])
  statusMessage String?
  lastSeen      DateTime?
  messages      Message[]
  chats         UserChat[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@map("users")
}

model Chat {
  id            Int          @id @default(autoincrement())
  chatType      ChatType     @default(private) // Enum field for chat type
  groupName     String?
  groupAvatar   String?
  createdBy     Int

  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  messages      Message[]
  participants  UserChat[]

  @@map("chats")
}

model UserChat {
  id            Int        @id @default(autoincrement())
  userId        Int
  chatId        Int
  user          User       @relation(fields: [userId], references: [id])
  chat          Chat       @relation(fields: [chatId], references: [id])

  lastMessage   String?
  isSeen        Boolean     @default(false)
  role          ChatRole    @default(member)
  mutedUntil    DateTime?
  pinned        Boolean     @default(false)
  updatedAt     DateTime    @default(now())

  @@unique([userId, chatId])
  @@map("user_chats")
}

model Message {
  id            Int        @id @default(autoincrement())
  chatId        Int
  senderId      Int
  chat          Chat       @relation(fields: [chatId], references: [id])
  sender        User       @relation(fields: [senderId], references: [id])

  content       String?
  image         String?
  isEdited      Boolean     @default(false)
  replyToId     Int?
  deletedAt     DateTime?
  createdAt     DateTime    @default(now())

  @@map("messages")
}

enum ChatType {
  private
  group
}

enum ChatRole {
  admin
  member
}

